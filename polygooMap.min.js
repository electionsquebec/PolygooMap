function polygooMap(b){var d,l=d=!1,m=!1,h=new google.maps.LatLngBounds,c,k,a=$.extend({polygons:[[new google.maps.LatLng(50,-70),new google.maps.LatLng(48,-70),new google.maps.LatLng(48,-75),new google.maps.LatLng(50,-75)],[new google.maps.LatLng(47,-70),new google.maps.LatLng(45,-70),new google.maps.LatLng(45,-75),new google.maps.LatLng(47,-75)]],fillColor:"#C5FF5E",fillOpacity:0.3,strokeWeight:1,strokeOpacity:0.7,strokeColor:"#000000",onClick:null,onMouseOver:null,onMouseOut:null,clickable:!0,
draggable:!1,editable:!1,visible:!0,zIndex:1,map:null},b);if(!a.map)throw Error("Function must have a map defined.");if("object"!=typeof a.map)throw Error("Map must be a google map object.");if(a.polygons instanceof Array){for(b=0;b<a.polygons.length;b++)if(a.polygons[b]instanceof Array)for(c=0;c<a.polygons[b].length;c++)if(a.polygons[b][c]instanceof Array)for(k=0;k<a.polygons[b][c].length;k++){if("number"!=typeof a.polygons[b][c][k])throw Error("Polygon must be an array of coordinates or an array of google maps LatLng.");
m=!0}else if("object"==typeof a.polygons[b][c])a.polygons[b][c].lat()&&a.polygons[b][c].lng()&&(d=!0);else{if("number"!=typeof a.polygons[b][c])throw Error("Polygon must be an array of coordinates or an array of google maps LatLng.");l=!0}else if("object"==typeof a.polygons[b])a.polygons[b].lat()&&a.polygons[b].lng()&&(d=!0);else throw Error("Polygon must be an array of coordinates or an array of google maps LatLng.");if(!d)if(l)for(b=0;b<a.polygons.length;b++)a.polygons[b]=new google.maps.LatLng(a.polygons[b][0],
a.polygons[b][1]);else if(m)for(b=0;b<a.polygons.length;b++)for(c=0;c<a.polygons[b].length;c++)a.polygons[b][c]=new google.maps.LatLng(a.polygons[b][c][0],a.polygons[b][c][1]);d=a.polygons}else throw Error("Polygon must be an array of coordinates or an array of google maps LatLng.");for(b=0;b<a.polygons.length;b++)if(a.polygons[b]instanceof Array)for(c=0;c<a.polygons[b].length;c++)h.extend(a.polygons[b][c]);else h.extend(a.polygons[b]);this.polygooMap=new google.maps.Polygon({paths:d,strokeColor:a.strokeColor,
strokeOpacity:a.strokeOpacity,strokeWeight:a.strokeWeight,fillOpacity:a.fillOpacity,fillColor:a.fillColor,clickable:a.clickable,draggable:a.draggable,editable:a.editable,visible:a.visible});this.polygooMap.setMap(a.map);if(a.onClick)if($.isFunction(a.onClick))google.maps.event.addListener(this.polygooMap,"click",function(b){a.onClick.call(this,b)});else if("object"==typeof a.onClick){var e=$.extend({fillColor:a.fillColor,fillOpacity:a.fillOpacity,strokeWeight:a.strokeWeight,strokeOpacity:a.strokeOpacity,
strokeColor:a.strokeColor},a.onClick);google.maps.event.addListener(this.polygooMap,"click",function(a){this.setOptions({fillColor:e.fillColor,fillOpacity:e.fillOpacity,strokeWeight:e.strokeWeight,strokeOpacity:e.strokeOpacity,strokeColor:e.strokeColor})})}else throw Error("Parameter must be an object or an anonymous function.");if(a.onMouseOver)if($.isFunction(a.onMouseOver))google.maps.event.addListener(this.polygooMap,"mouseover",function(b){a.onMouseOver.call(this,b)});else if("object"==typeof a.onMouseOver){var f=
$.extend({fillColor:a.fillColor,fillOpacity:a.fillOpacity,strokeWeight:a.strokeWeight,strokeOpacity:a.strokeOpacity,strokeColor:a.strokeColor},a.onMouseOver);google.maps.event.addListener(this.polygooMap,"mouseover",function(a){this.setOptions({fillColor:f.fillColor,fillOpacity:f.fillOpacity,strokeWeight:f.strokeWeight,strokeOpacity:f.strokeOpacity,strokeColor:f.strokeColor})})}else throw Error("Parameter must be an object or an anonymous function.");if(a.onMouseOut)if($.isFunction(a.onMouseOut))google.maps.event.addListener(this.polygooMap,
"mouseout",function(b){a.onMouseOut.call(this,b)});else if("object"==typeof a.onMouseOut){var g=$.extend({fillColor:a.fillColor,fillOpacity:a.fillOpacity,strokeWeight:a.strokeWeight,strokeOpacity:a.strokeOpacity,strokeColor:a.strokeColor},a.onMouseOut);google.maps.event.addListener(this.polygooMap,"mouseout",function(a){this.setOptions({fillColor:g.fillColor,fillOpacity:g.fillOpacity,strokeWeight:g.strokeWeight,strokeOpacity:g.strokeOpacity,strokeColor:g.strokeColor})})}else throw Error("Parameter must be an object or an anonymous function.");
this.onClick=function(a){if($.isFunction(a))google.maps.event.clearListeners(this.polygooMap,"click"),google.maps.event.addListener(this.polygooMap,"click",function(b){a.call(this,b)});else throw Error("Parameter must be an anonymous function.");};this.onMouseOver=function(a){if($.isFunction(a))google.maps.event.clearListeners(this.polygooMap,"mouseover"),google.maps.event.addListener(this.polygooMap,"mouseover",function(b){a.call(this,b)});else throw Error("Parameter must be an anonymous function.");
};this.onMouseOut=function(a){if($.isFunction(a))google.maps.event.clearListeners(this.polygooMap,"mouseout"),google.maps.event.addListener(this.polygooMap,"mouseout",function(b){a.call(this,b)});else throw Error("Parameter must be an anonymous function.");};this.show=function(){this.polygooMap.setVisible(!0)};this.hide=function(){this.polygooMap.setVisible(!1)};this.isVisible=function(){return this.polygooMap.getVisible()};this.getRawPoly=function(){return this.polygooMap};this.setFillColor=function(b){b=
$.extend({color:a.fillColor,opacity:a.fillOpacity},b);this.polygooMap.setOptions({fillColor:b.color,fillOpacity:b.opacity})};this.setStroke=function(b){b=$.extend({weight:a.strokeWeight,color:a.strokeColor,opacity:a.strokeOpacity},b);this.polygooMap.setOptions({strokeWeight:b.weight,strokeColor:b.color,strokeOpacity:b.opacity})};this.getMaxBounds=function(){return h};this.getCenter=function(){return h.getCenter()};return this};